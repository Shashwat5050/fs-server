// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: fs-manager.proto

package fsmanager

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FsManager_GetFileStat_FullMethodName      = "/fsmanager.FsManager/GetFileStat"
	FsManager_ListFilePath_FullMethodName     = "/fsmanager.FsManager/ListFilePath"
	FsManager_CreatePath_FullMethodName       = "/fsmanager.FsManager/CreatePath"
	FsManager_DownloadFile_FullMethodName     = "/fsmanager.FsManager/DownloadFile"
	FsManager_BulkDownloadFile_FullMethodName = "/fsmanager.FsManager/BulkDownloadFile"
	FsManager_UploadFile_FullMethodName       = "/fsmanager.FsManager/UploadFile"
	FsManager_DeleteFile_FullMethodName       = "/fsmanager.FsManager/DeleteFile"
	FsManager_RecoverFile_FullMethodName      = "/fsmanager.FsManager/RecoverFile"
	FsManager_MoveFile_FullMethodName         = "/fsmanager.FsManager/MoveFile"
	FsManager_CopyFile_FullMethodName         = "/fsmanager.FsManager/CopyFile"
	FsManager_CompressFile_FullMethodName     = "/fsmanager.FsManager/CompressFile"
	FsManager_BulkCompressFile_FullMethodName = "/fsmanager.FsManager/BulkCompressFile"
	FsManager_GetFileData_FullMethodName      = "/fsmanager.FsManager/GetFileData"
	FsManager_SetFileData_FullMethodName      = "/fsmanager.FsManager/SetFileData"
)

// FsManagerClient is the client API for FsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FsManagerClient interface {
	GetFileStat(ctx context.Context, in *GetFileStatRequest, opts ...grpc.CallOption) (*GetFileStatResponse, error)
	ListFilePath(ctx context.Context, in *ListFilePathRequest, opts ...grpc.CallOption) (*ListFilePathResponse, error)
	CreatePath(ctx context.Context, in *CreatePathRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
	BulkDownloadFile(ctx context.Context, in *BulkDownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecoverFile(ctx context.Context, in *RecoverFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MoveFile(ctx context.Context, in *TwoFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CopyFile(ctx context.Context, in *TwoFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CompressFile(ctx context.Context, in *CompressFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BulkCompressFile(ctx context.Context, in *BulkCompressFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetFileData(ctx context.Context, in *GetFileDataRequest, opts ...grpc.CallOption) (*GetFileDataResponse, error)
	SetFileData(ctx context.Context, in *SetFileDataRequest, opts ...grpc.CallOption) (*SetFileDataResponse, error)
}

type fsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFsManagerClient(cc grpc.ClientConnInterface) FsManagerClient {
	return &fsManagerClient{cc}
}

func (c *fsManagerClient) GetFileStat(ctx context.Context, in *GetFileStatRequest, opts ...grpc.CallOption) (*GetFileStatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileStatResponse)
	err := c.cc.Invoke(ctx, FsManager_GetFileStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) ListFilePath(ctx context.Context, in *ListFilePathRequest, opts ...grpc.CallOption) (*ListFilePathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilePathResponse)
	err := c.cc.Invoke(ctx, FsManager_ListFilePath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) CreatePath(ctx context.Context, in *CreatePathRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FsManager_CreatePath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FsManager_ServiceDesc.Streams[0], FsManager_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FsManager_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

func (c *fsManagerClient) BulkDownloadFile(ctx context.Context, in *BulkDownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FsManager_ServiceDesc.Streams[1], FsManager_BulkDownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BulkDownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FsManager_BulkDownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

func (c *fsManagerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FsManager_ServiceDesc.Streams[2], FsManager_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FsManager_UploadFileClient = grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse]

func (c *fsManagerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FsManager_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) RecoverFile(ctx context.Context, in *RecoverFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FsManager_RecoverFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) MoveFile(ctx context.Context, in *TwoFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FsManager_MoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) CopyFile(ctx context.Context, in *TwoFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FsManager_CopyFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) CompressFile(ctx context.Context, in *CompressFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FsManager_CompressFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) BulkCompressFile(ctx context.Context, in *BulkCompressFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FsManager_BulkCompressFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) GetFileData(ctx context.Context, in *GetFileDataRequest, opts ...grpc.CallOption) (*GetFileDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileDataResponse)
	err := c.cc.Invoke(ctx, FsManager_GetFileData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) SetFileData(ctx context.Context, in *SetFileDataRequest, opts ...grpc.CallOption) (*SetFileDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFileDataResponse)
	err := c.cc.Invoke(ctx, FsManager_SetFileData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FsManagerServer is the server API for FsManager service.
// All implementations must embed UnimplementedFsManagerServer
// for forward compatibility.
type FsManagerServer interface {
	GetFileStat(context.Context, *GetFileStatRequest) (*GetFileStatResponse, error)
	ListFilePath(context.Context, *ListFilePathRequest) (*ListFilePathResponse, error)
	CreatePath(context.Context, *CreatePathRequest) (*empty.Empty, error)
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	BulkDownloadFile(*BulkDownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error
	DeleteFile(context.Context, *DeleteFileRequest) (*empty.Empty, error)
	RecoverFile(context.Context, *RecoverFileRequest) (*empty.Empty, error)
	MoveFile(context.Context, *TwoFileRequest) (*empty.Empty, error)
	CopyFile(context.Context, *TwoFileRequest) (*empty.Empty, error)
	CompressFile(context.Context, *CompressFileRequest) (*empty.Empty, error)
	BulkCompressFile(context.Context, *BulkCompressFileRequest) (*empty.Empty, error)
	GetFileData(context.Context, *GetFileDataRequest) (*GetFileDataResponse, error)
	SetFileData(context.Context, *SetFileDataRequest) (*SetFileDataResponse, error)
	mustEmbedUnimplementedFsManagerServer()
}

// UnimplementedFsManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFsManagerServer struct{}

func (UnimplementedFsManagerServer) GetFileStat(context.Context, *GetFileStatRequest) (*GetFileStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileStat not implemented")
}
func (UnimplementedFsManagerServer) ListFilePath(context.Context, *ListFilePathRequest) (*ListFilePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilePath not implemented")
}
func (UnimplementedFsManagerServer) CreatePath(context.Context, *CreatePathRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePath not implemented")
}
func (UnimplementedFsManagerServer) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFsManagerServer) BulkDownloadFile(*BulkDownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BulkDownloadFile not implemented")
}
func (UnimplementedFsManagerServer) UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFsManagerServer) DeleteFile(context.Context, *DeleteFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFsManagerServer) RecoverFile(context.Context, *RecoverFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverFile not implemented")
}
func (UnimplementedFsManagerServer) MoveFile(context.Context, *TwoFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedFsManagerServer) CopyFile(context.Context, *TwoFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedFsManagerServer) CompressFile(context.Context, *CompressFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompressFile not implemented")
}
func (UnimplementedFsManagerServer) BulkCompressFile(context.Context, *BulkCompressFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCompressFile not implemented")
}
func (UnimplementedFsManagerServer) GetFileData(context.Context, *GetFileDataRequest) (*GetFileDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileData not implemented")
}
func (UnimplementedFsManagerServer) SetFileData(context.Context, *SetFileDataRequest) (*SetFileDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileData not implemented")
}
func (UnimplementedFsManagerServer) mustEmbedUnimplementedFsManagerServer() {}
func (UnimplementedFsManagerServer) testEmbeddedByValue()                   {}

// UnsafeFsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FsManagerServer will
// result in compilation errors.
type UnsafeFsManagerServer interface {
	mustEmbedUnimplementedFsManagerServer()
}

func RegisterFsManagerServer(s grpc.ServiceRegistrar, srv FsManagerServer) {
	// If the following call pancis, it indicates UnimplementedFsManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FsManager_ServiceDesc, srv)
}

func _FsManager_GetFileStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).GetFileStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_GetFileStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).GetFileStat(ctx, req.(*GetFileStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_ListFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).ListFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_ListFilePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).ListFilePath(ctx, req.(*ListFilePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_CreatePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).CreatePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_CreatePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).CreatePath(ctx, req.(*CreatePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FsManagerServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FsManager_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

func _FsManager_BulkDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BulkDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FsManagerServer).BulkDownloadFile(m, &grpc.GenericServerStream[BulkDownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FsManager_BulkDownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

func _FsManager_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FsManagerServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FsManager_UploadFileServer = grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]

func _FsManager_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_RecoverFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).RecoverFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_RecoverFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).RecoverFile(ctx, req.(*RecoverFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_MoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).MoveFile(ctx, req.(*TwoFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_CopyFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).CopyFile(ctx, req.(*TwoFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_CompressFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).CompressFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_CompressFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).CompressFile(ctx, req.(*CompressFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_BulkCompressFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCompressFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).BulkCompressFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_BulkCompressFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).BulkCompressFile(ctx, req.(*BulkCompressFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_GetFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).GetFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_GetFileData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).GetFileData(ctx, req.(*GetFileDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_SetFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFileDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).SetFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FsManager_SetFileData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).SetFileData(ctx, req.(*SetFileDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FsManager_ServiceDesc is the grpc.ServiceDesc for FsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fsmanager.FsManager",
	HandlerType: (*FsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileStat",
			Handler:    _FsManager_GetFileStat_Handler,
		},
		{
			MethodName: "ListFilePath",
			Handler:    _FsManager_ListFilePath_Handler,
		},
		{
			MethodName: "CreatePath",
			Handler:    _FsManager_CreatePath_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FsManager_DeleteFile_Handler,
		},
		{
			MethodName: "RecoverFile",
			Handler:    _FsManager_RecoverFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _FsManager_MoveFile_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _FsManager_CopyFile_Handler,
		},
		{
			MethodName: "CompressFile",
			Handler:    _FsManager_CompressFile_Handler,
		},
		{
			MethodName: "BulkCompressFile",
			Handler:    _FsManager_BulkCompressFile_Handler,
		},
		{
			MethodName: "GetFileData",
			Handler:    _FsManager_GetFileData_Handler,
		},
		{
			MethodName: "SetFileData",
			Handler:    _FsManager_SetFileData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _FsManager_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkDownloadFile",
			Handler:       _FsManager_BulkDownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _FsManager_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fs-manager.proto",
}
