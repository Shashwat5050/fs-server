// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: fs-manager.proto

package fsmanager

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FsManagerClient is the client API for FsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FsManagerClient interface {
	GetFileStat(ctx context.Context, in *GetFileStatRequest, opts ...grpc.CallOption) (*GetFileStatResponse, error)
	ListFilePath(ctx context.Context, in *ListFilePathRequest, opts ...grpc.CallOption) (*ListFilePathResponse, error)
	CreatePath(ctx context.Context, in *CreatePathRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FsManager_DownloadFileClient, error)
	BulkDownloadFile(ctx context.Context, in *BulkDownloadFileRequest, opts ...grpc.CallOption) (FsManager_BulkDownloadFileClient, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FsManager_UploadFileClient, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecoverFile(ctx context.Context, in *RecoverFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MoveFile(ctx context.Context, in *TwoFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CopyFile(ctx context.Context, in *TwoFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CompressFile(ctx context.Context, in *CompressFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BulkCompressFile(ctx context.Context, in *BulkCompressFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type fsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFsManagerClient(cc grpc.ClientConnInterface) FsManagerClient {
	return &fsManagerClient{cc}
}

func (c *fsManagerClient) GetFileStat(ctx context.Context, in *GetFileStatRequest, opts ...grpc.CallOption) (*GetFileStatResponse, error) {
	out := new(GetFileStatResponse)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/GetFileStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) ListFilePath(ctx context.Context, in *ListFilePathRequest, opts ...grpc.CallOption) (*ListFilePathResponse, error) {
	out := new(ListFilePathResponse)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/ListFilePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) CreatePath(ctx context.Context, in *CreatePathRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/CreatePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FsManager_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FsManager_ServiceDesc.Streams[0], "/fsmanager.FsManager/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fsManagerDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FsManager_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type fsManagerDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fsManagerDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fsManagerClient) BulkDownloadFile(ctx context.Context, in *BulkDownloadFileRequest, opts ...grpc.CallOption) (FsManager_BulkDownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FsManager_ServiceDesc.Streams[1], "/fsmanager.FsManager/BulkDownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fsManagerBulkDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FsManager_BulkDownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type fsManagerBulkDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fsManagerBulkDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fsManagerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FsManager_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FsManager_ServiceDesc.Streams[2], "/fsmanager.FsManager/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fsManagerUploadFileClient{stream}
	return x, nil
}

type FsManager_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type fsManagerUploadFileClient struct {
	grpc.ClientStream
}

func (x *fsManagerUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fsManagerUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fsManagerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) RecoverFile(ctx context.Context, in *RecoverFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/RecoverFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) MoveFile(ctx context.Context, in *TwoFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/MoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) CopyFile(ctx context.Context, in *TwoFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) CompressFile(ctx context.Context, in *CompressFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/CompressFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsManagerClient) BulkCompressFile(ctx context.Context, in *BulkCompressFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fsmanager.FsManager/BulkCompressFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FsManagerServer is the server API for FsManager service.
// All implementations must embed UnimplementedFsManagerServer
// for forward compatibility
type FsManagerServer interface {
	GetFileStat(context.Context, *GetFileStatRequest) (*GetFileStatResponse, error)
	ListFilePath(context.Context, *ListFilePathRequest) (*ListFilePathResponse, error)
	CreatePath(context.Context, *CreatePathRequest) (*empty.Empty, error)
	DownloadFile(*DownloadFileRequest, FsManager_DownloadFileServer) error
	BulkDownloadFile(*BulkDownloadFileRequest, FsManager_BulkDownloadFileServer) error
	UploadFile(FsManager_UploadFileServer) error
	DeleteFile(context.Context, *DeleteFileRequest) (*empty.Empty, error)
	RecoverFile(context.Context, *RecoverFileRequest) (*empty.Empty, error)
	MoveFile(context.Context, *TwoFileRequest) (*empty.Empty, error)
	CopyFile(context.Context, *TwoFileRequest) (*empty.Empty, error)
	CompressFile(context.Context, *CompressFileRequest) (*empty.Empty, error)
	BulkCompressFile(context.Context, *BulkCompressFileRequest) (*empty.Empty, error)
	mustEmbedUnimplementedFsManagerServer()
}

// UnimplementedFsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedFsManagerServer struct {
}

func (UnimplementedFsManagerServer) GetFileStat(context.Context, *GetFileStatRequest) (*GetFileStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileStat not implemented")
}
func (UnimplementedFsManagerServer) ListFilePath(context.Context, *ListFilePathRequest) (*ListFilePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilePath not implemented")
}
func (UnimplementedFsManagerServer) CreatePath(context.Context, *CreatePathRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePath not implemented")
}
func (UnimplementedFsManagerServer) DownloadFile(*DownloadFileRequest, FsManager_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFsManagerServer) BulkDownloadFile(*BulkDownloadFileRequest, FsManager_BulkDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkDownloadFile not implemented")
}
func (UnimplementedFsManagerServer) UploadFile(FsManager_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFsManagerServer) DeleteFile(context.Context, *DeleteFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFsManagerServer) RecoverFile(context.Context, *RecoverFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverFile not implemented")
}
func (UnimplementedFsManagerServer) MoveFile(context.Context, *TwoFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedFsManagerServer) CopyFile(context.Context, *TwoFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedFsManagerServer) CompressFile(context.Context, *CompressFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompressFile not implemented")
}
func (UnimplementedFsManagerServer) BulkCompressFile(context.Context, *BulkCompressFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCompressFile not implemented")
}
func (UnimplementedFsManagerServer) mustEmbedUnimplementedFsManagerServer() {}

// UnsafeFsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FsManagerServer will
// result in compilation errors.
type UnsafeFsManagerServer interface {
	mustEmbedUnimplementedFsManagerServer()
}

func RegisterFsManagerServer(s grpc.ServiceRegistrar, srv FsManagerServer) {
	s.RegisterService(&FsManager_ServiceDesc, srv)
}

func _FsManager_GetFileStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).GetFileStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/GetFileStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).GetFileStat(ctx, req.(*GetFileStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_ListFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).ListFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/ListFilePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).ListFilePath(ctx, req.(*ListFilePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_CreatePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).CreatePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/CreatePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).CreatePath(ctx, req.(*CreatePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FsManagerServer).DownloadFile(m, &fsManagerDownloadFileServer{stream})
}

type FsManager_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type fsManagerDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fsManagerDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FsManager_BulkDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BulkDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FsManagerServer).BulkDownloadFile(m, &fsManagerBulkDownloadFileServer{stream})
}

type FsManager_BulkDownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type fsManagerBulkDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fsManagerBulkDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FsManager_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FsManagerServer).UploadFile(&fsManagerUploadFileServer{stream})
}

type FsManager_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type fsManagerUploadFileServer struct {
	grpc.ServerStream
}

func (x *fsManagerUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fsManagerUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FsManager_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_RecoverFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).RecoverFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/RecoverFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).RecoverFile(ctx, req.(*RecoverFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/MoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).MoveFile(ctx, req.(*TwoFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).CopyFile(ctx, req.(*TwoFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_CompressFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).CompressFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/CompressFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).CompressFile(ctx, req.(*CompressFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FsManager_BulkCompressFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCompressFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsManagerServer).BulkCompressFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.FsManager/BulkCompressFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsManagerServer).BulkCompressFile(ctx, req.(*BulkCompressFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FsManager_ServiceDesc is the grpc.ServiceDesc for FsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fsmanager.FsManager",
	HandlerType: (*FsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileStat",
			Handler:    _FsManager_GetFileStat_Handler,
		},
		{
			MethodName: "ListFilePath",
			Handler:    _FsManager_ListFilePath_Handler,
		},
		{
			MethodName: "CreatePath",
			Handler:    _FsManager_CreatePath_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FsManager_DeleteFile_Handler,
		},
		{
			MethodName: "RecoverFile",
			Handler:    _FsManager_RecoverFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _FsManager_MoveFile_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _FsManager_CopyFile_Handler,
		},
		{
			MethodName: "CompressFile",
			Handler:    _FsManager_CompressFile_Handler,
		},
		{
			MethodName: "BulkCompressFile",
			Handler:    _FsManager_BulkCompressFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _FsManager_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkDownloadFile",
			Handler:       _FsManager_BulkDownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _FsManager_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fs-manager.proto",
}
