// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: sftp-manager.proto

package sftpmanager

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SftpManager_ConnectToSFTP_FullMethodName    = "/sftpmanager.SftpManager/ConnectToSFTP"
	SftpManager_SFTPUploadFile_FullMethodName   = "/sftpmanager.SftpManager/SFTPUploadFile"
	SftpManager_SFTPDownloadFile_FullMethodName = "/sftpmanager.SftpManager/SFTPDownloadFile"
	SftpManager_SFTPDeleteFile_FullMethodName   = "/sftpmanager.SftpManager/SFTPDeleteFile"
)

// SftpManagerClient is the client API for SftpManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SftpManagerClient interface {
	ConnectToSFTP(ctx context.Context, in *SFTPConnectRequest, opts ...grpc.CallOption) (*SFTPConnectResponse, error)
	SFTPUploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SFTPUploadFileRequest, SFTPUploadFileResponse], error)
	SFTPDownloadFile(ctx context.Context, in *SFTPDownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SFTPDownloadFileResponse], error)
	SFTPDeleteFile(ctx context.Context, in *SFTPDeleteFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sftpManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSftpManagerClient(cc grpc.ClientConnInterface) SftpManagerClient {
	return &sftpManagerClient{cc}
}

func (c *sftpManagerClient) ConnectToSFTP(ctx context.Context, in *SFTPConnectRequest, opts ...grpc.CallOption) (*SFTPConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SFTPConnectResponse)
	err := c.cc.Invoke(ctx, SftpManager_ConnectToSFTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sftpManagerClient) SFTPUploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SFTPUploadFileRequest, SFTPUploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SftpManager_ServiceDesc.Streams[0], SftpManager_SFTPUploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SFTPUploadFileRequest, SFTPUploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SftpManager_SFTPUploadFileClient = grpc.ClientStreamingClient[SFTPUploadFileRequest, SFTPUploadFileResponse]

func (c *sftpManagerClient) SFTPDownloadFile(ctx context.Context, in *SFTPDownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SFTPDownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SftpManager_ServiceDesc.Streams[1], SftpManager_SFTPDownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SFTPDownloadFileRequest, SFTPDownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SftpManager_SFTPDownloadFileClient = grpc.ServerStreamingClient[SFTPDownloadFileResponse]

func (c *sftpManagerClient) SFTPDeleteFile(ctx context.Context, in *SFTPDeleteFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, SftpManager_SFTPDeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SftpManagerServer is the server API for SftpManager service.
// All implementations must embed UnimplementedSftpManagerServer
// for forward compatibility.
type SftpManagerServer interface {
	ConnectToSFTP(context.Context, *SFTPConnectRequest) (*SFTPConnectResponse, error)
	SFTPUploadFile(grpc.ClientStreamingServer[SFTPUploadFileRequest, SFTPUploadFileResponse]) error
	SFTPDownloadFile(*SFTPDownloadFileRequest, grpc.ServerStreamingServer[SFTPDownloadFileResponse]) error
	SFTPDeleteFile(context.Context, *SFTPDeleteFileRequest) (*empty.Empty, error)
	mustEmbedUnimplementedSftpManagerServer()
}

// UnimplementedSftpManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSftpManagerServer struct{}

func (UnimplementedSftpManagerServer) ConnectToSFTP(context.Context, *SFTPConnectRequest) (*SFTPConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToSFTP not implemented")
}
func (UnimplementedSftpManagerServer) SFTPUploadFile(grpc.ClientStreamingServer[SFTPUploadFileRequest, SFTPUploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SFTPUploadFile not implemented")
}
func (UnimplementedSftpManagerServer) SFTPDownloadFile(*SFTPDownloadFileRequest, grpc.ServerStreamingServer[SFTPDownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SFTPDownloadFile not implemented")
}
func (UnimplementedSftpManagerServer) SFTPDeleteFile(context.Context, *SFTPDeleteFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SFTPDeleteFile not implemented")
}
func (UnimplementedSftpManagerServer) mustEmbedUnimplementedSftpManagerServer() {}
func (UnimplementedSftpManagerServer) testEmbeddedByValue()                     {}

// UnsafeSftpManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SftpManagerServer will
// result in compilation errors.
type UnsafeSftpManagerServer interface {
	mustEmbedUnimplementedSftpManagerServer()
}

func RegisterSftpManagerServer(s grpc.ServiceRegistrar, srv SftpManagerServer) {
	// If the following call pancis, it indicates UnimplementedSftpManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SftpManager_ServiceDesc, srv)
}

func _SftpManager_ConnectToSFTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SFTPConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SftpManagerServer).ConnectToSFTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SftpManager_ConnectToSFTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SftpManagerServer).ConnectToSFTP(ctx, req.(*SFTPConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SftpManager_SFTPUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SftpManagerServer).SFTPUploadFile(&grpc.GenericServerStream[SFTPUploadFileRequest, SFTPUploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SftpManager_SFTPUploadFileServer = grpc.ClientStreamingServer[SFTPUploadFileRequest, SFTPUploadFileResponse]

func _SftpManager_SFTPDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SFTPDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SftpManagerServer).SFTPDownloadFile(m, &grpc.GenericServerStream[SFTPDownloadFileRequest, SFTPDownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SftpManager_SFTPDownloadFileServer = grpc.ServerStreamingServer[SFTPDownloadFileResponse]

func _SftpManager_SFTPDeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SFTPDeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SftpManagerServer).SFTPDeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SftpManager_SFTPDeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SftpManagerServer).SFTPDeleteFile(ctx, req.(*SFTPDeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SftpManager_ServiceDesc is the grpc.ServiceDesc for SftpManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SftpManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sftpmanager.SftpManager",
	HandlerType: (*SftpManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectToSFTP",
			Handler:    _SftpManager_ConnectToSFTP_Handler,
		},
		{
			MethodName: "SFTPDeleteFile",
			Handler:    _SftpManager_SFTPDeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SFTPUploadFile",
			Handler:       _SftpManager_SFTPUploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SFTPDownloadFile",
			Handler:       _SftpManager_SFTPDownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sftp-manager.proto",
}
