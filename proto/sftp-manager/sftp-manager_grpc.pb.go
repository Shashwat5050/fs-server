// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: sftp-manager.proto

package fsmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SftpManagerClient is the client API for SftpManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SftpManagerClient interface {
	ConnectToSFTP(ctx context.Context, in *SFTPConnectRequest, opts ...grpc.CallOption) (*SFTPConnectResponse, error)
	SFTPUploadFile(ctx context.Context, opts ...grpc.CallOption) (SftpManager_SFTPUploadFileClient, error)
	SFTPDownloadFile(ctx context.Context, in *SFTPDownloadFileRequest, opts ...grpc.CallOption) (SftpManager_SFTPDownloadFileClient, error)
}

type sftpManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSftpManagerClient(cc grpc.ClientConnInterface) SftpManagerClient {
	return &sftpManagerClient{cc}
}

func (c *sftpManagerClient) ConnectToSFTP(ctx context.Context, in *SFTPConnectRequest, opts ...grpc.CallOption) (*SFTPConnectResponse, error) {
	out := new(SFTPConnectResponse)
	err := c.cc.Invoke(ctx, "/fsmanager.SftpManager/ConnectToSFTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sftpManagerClient) SFTPUploadFile(ctx context.Context, opts ...grpc.CallOption) (SftpManager_SFTPUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SftpManager_ServiceDesc.Streams[0], "/fsmanager.SftpManager/SFTPUploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &sftpManagerSFTPUploadFileClient{stream}
	return x, nil
}

type SftpManager_SFTPUploadFileClient interface {
	Send(*SFTPUploadFileRequest) error
	CloseAndRecv() (*SFTPUploadFileResponse, error)
	grpc.ClientStream
}

type sftpManagerSFTPUploadFileClient struct {
	grpc.ClientStream
}

func (x *sftpManagerSFTPUploadFileClient) Send(m *SFTPUploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sftpManagerSFTPUploadFileClient) CloseAndRecv() (*SFTPUploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SFTPUploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sftpManagerClient) SFTPDownloadFile(ctx context.Context, in *SFTPDownloadFileRequest, opts ...grpc.CallOption) (SftpManager_SFTPDownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SftpManager_ServiceDesc.Streams[1], "/fsmanager.SftpManager/SFTPDownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &sftpManagerSFTPDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SftpManager_SFTPDownloadFileClient interface {
	Recv() (*SFTPDownloadFileResponse, error)
	grpc.ClientStream
}

type sftpManagerSFTPDownloadFileClient struct {
	grpc.ClientStream
}

func (x *sftpManagerSFTPDownloadFileClient) Recv() (*SFTPDownloadFileResponse, error) {
	m := new(SFTPDownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SftpManagerServer is the server API for SftpManager service.
// All implementations must embed UnimplementedSftpManagerServer
// for forward compatibility
type SftpManagerServer interface {
	ConnectToSFTP(context.Context, *SFTPConnectRequest) (*SFTPConnectResponse, error)
	SFTPUploadFile(SftpManager_SFTPUploadFileServer) error
	SFTPDownloadFile(*SFTPDownloadFileRequest, SftpManager_SFTPDownloadFileServer) error
	mustEmbedUnimplementedSftpManagerServer()
}

// UnimplementedSftpManagerServer must be embedded to have forward compatible implementations.
type UnimplementedSftpManagerServer struct {
}

func (UnimplementedSftpManagerServer) ConnectToSFTP(context.Context, *SFTPConnectRequest) (*SFTPConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToSFTP not implemented")
}
func (UnimplementedSftpManagerServer) SFTPUploadFile(SftpManager_SFTPUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SFTPUploadFile not implemented")
}
func (UnimplementedSftpManagerServer) SFTPDownloadFile(*SFTPDownloadFileRequest, SftpManager_SFTPDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SFTPDownloadFile not implemented")
}
func (UnimplementedSftpManagerServer) mustEmbedUnimplementedSftpManagerServer() {}

// UnsafeSftpManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SftpManagerServer will
// result in compilation errors.
type UnsafeSftpManagerServer interface {
	mustEmbedUnimplementedSftpManagerServer()
}

func RegisterSftpManagerServer(s grpc.ServiceRegistrar, srv SftpManagerServer) {
	s.RegisterService(&SftpManager_ServiceDesc, srv)
}

func _SftpManager_ConnectToSFTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SFTPConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SftpManagerServer).ConnectToSFTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fsmanager.SftpManager/ConnectToSFTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SftpManagerServer).ConnectToSFTP(ctx, req.(*SFTPConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SftpManager_SFTPUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SftpManagerServer).SFTPUploadFile(&sftpManagerSFTPUploadFileServer{stream})
}

type SftpManager_SFTPUploadFileServer interface {
	SendAndClose(*SFTPUploadFileResponse) error
	Recv() (*SFTPUploadFileRequest, error)
	grpc.ServerStream
}

type sftpManagerSFTPUploadFileServer struct {
	grpc.ServerStream
}

func (x *sftpManagerSFTPUploadFileServer) SendAndClose(m *SFTPUploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sftpManagerSFTPUploadFileServer) Recv() (*SFTPUploadFileRequest, error) {
	m := new(SFTPUploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SftpManager_SFTPDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SFTPDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SftpManagerServer).SFTPDownloadFile(m, &sftpManagerSFTPDownloadFileServer{stream})
}

type SftpManager_SFTPDownloadFileServer interface {
	Send(*SFTPDownloadFileResponse) error
	grpc.ServerStream
}

type sftpManagerSFTPDownloadFileServer struct {
	grpc.ServerStream
}

func (x *sftpManagerSFTPDownloadFileServer) Send(m *SFTPDownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SftpManager_ServiceDesc is the grpc.ServiceDesc for SftpManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SftpManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fsmanager.SftpManager",
	HandlerType: (*SftpManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectToSFTP",
			Handler:    _SftpManager_ConnectToSFTP_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SFTPUploadFile",
			Handler:       _SftpManager_SFTPUploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SFTPDownloadFile",
			Handler:       _SftpManager_SFTPDownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sftp-manager.proto",
}
